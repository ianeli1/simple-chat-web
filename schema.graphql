# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIError {
  code: ErrorCode!
  message: String!
}

type Channel {
  author: User!
  createdAt: DateTime!
  id: Float!
  messages: [Message!]!
  name: String!
  owner: Server!
  updatedAt: DateTime!
}

type ChannelResponse {
  channel: Channel
  error: APIError
}

type Confirmation {
  error: APIError
  ok: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Emote {
  author: User!
  createdAt: DateTime!
  id: Float!
  image: String!
  name: String!
  owner: Server!
  updatedAt: DateTime!
}

input EmoteData {
  image: String!
  name: String!
}

type EmoteObject {
  id: Float!
  image: String!
  name: String!
  owner: ProtoServer!
}

type EmoteResponse {
  emotes: [EmoteObject!]
  error: APIError
}

enum ErrorCode {
  CHANNEL_DOESNT_EXIST
  EMOTE_DOESNT_EXIST
  INVITE_DOESNT_EXIST
  NOT_LOGGED_IN
  NOT_SERVER_ADMIN
  NOT_SERVER_MEMBER
  OTHER
  SERVER_DOESNT_EXIST
  UNKNOWN
  USER_DOESNT_EXIST
}

type Invite {
  author: User!
  createdAt: DateTime!
  expire: DateTime
  id: Float!
  owner: Server!
  updatedAt: DateTime!
}

type InviteListResponse {
  error: APIError
  invites: [ProtoInvite!]
}

type InviteResponse {
  error: APIError
  invite: ProtoInvite
}

type Message {
  author: User!
  channel: Channel!
  content: String!
  createdAt: DateTime!
  emotes: [Emote!]
  id: Float!
  image: String
  invite: Invite
  updatedAt: DateTime!
}

input MessageData {
  content: String!
  emotes: [Int!]
  image: String
  invite: Int
}

type Mutation {
  acceptRequest(userId: String!): Boolean
  changeAvatar(
    """URL of the new avatar"""
    image: String!
  ): Confirmation!
  changeServerIcon(image: String!, serverId: Float!): Confirmation!
  createChannel(name: String!, serverId: Float!): Confirmation!
  createEmote(emote: EmoteData!, serverId: Float!): Confirmation!
  createInvite(expire: DateTime, serverId: Float!): InviteResponse!
  createMessage(channelId: Float!, message: MessageData!): Confirmation!
  createServer(name: String!): Confirmation!
  createUser(token: String!, userData: UserData!): UserResponse!
  declineRequest(userId: String!): Boolean!
  kickMember(serverId: Float!, userId: String!): Confirmation!
  leaveServer(serverId: Float!): Confirmation!
  removeChannel(channelId: Float!): Confirmation!
  removeEmote(emoteId: Float!): Confirmation!
  removeFriend(userId: String!): Boolean
  removeInvite(inviteId: Float!): Confirmation!
  sendRequest(userId: String!): Boolean
  useInvite(inviteId: Float!): Confirmation!
}

type ProtoInvite {
  author: ProtoUser!
  createdAt: DateTime!
  expire: DateTime
  id: Float!
  owner: ProtoServer!
}

type ProtoServer {
  icon: String
  id: Float!
  name: String!
}

type ProtoUser {
  birthday: DateTime
  createdAt: DateTime!
  icon: String
  id: String!
  isFriend: Boolean
  name: String!
  sentFriendRequest: Boolean
}

type ProtoUserResponse {
  error: APIError
  user: ProtoUser
}

type Query {
  allChannels: [Channel!]! @deprecated(reason: "debug")
  allInvites: InviteListResponse!
  allMessages: [Message!]!
  channel(channelId: Float!): ChannelResponse!
  channels(serverId: Float!): [Channel!] @deprecated(reason: "useless")
  debugGetToken(email: String!, password: String!): String
  emotes: EmoteResponse!
  invite(inviteId: Float!): InviteResponse!
  invites(serverId: Float!): InviteListResponse!
  login(token: String!): User
  me: UserResponse!
  messages(channelId: Float!): [Message!]
  myEmotes: EmoteResponse!
  myServers: ServerListResponse! @deprecated(reason: "doesn't populate all values, deemed unnecessary, use the query me{}")
  server(serverId: Float!): ServerResponse!
  servers: [Server!]! @deprecated(reason: "debug")
  user(id: String!): ProtoUserResponse!
  users: [User!]! @deprecated(reason: "only for debug use")
}

type Server {
  author: User!
  channels: [Channel!]!
  createdAt: DateTime!
  emotes: [Emote!]!
  icon: String
  id: Float!
  invites: [Invite!]!
  members: [User!]!
  name: String!
  updatedAt: DateTime!
}

type ServerListResponse {
  error: APIError
  servers: [Server!]
}

type ServerResponse {
  error: APIError
  server: Server
}

type Subscription {
  newMessage(channelId: Float!): Message!
}

type User {
  birthday: DateTime
  createdAt: DateTime!
  email: String!
  friendRequests: [User!]!
  friends: [User!]!
  icon: String
  id: String!
  name: String!
  servers: [Server!]!
  serversOwned: [Server!]!
  updatedAt: DateTime!
}

input UserData {
  birthday: DateTime!
  email: String!
  name: String!
}

type UserResponse {
  error: APIError
  user: User
}
